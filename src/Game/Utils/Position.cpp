#include "pch.h"
#include "Position.h"

namespace chessy
{
	//////////////////////////////////////////////////////////////////////////////////////////
	Position::Position(int8_t index) : m_row(index / sChessboardSide), m_col(index % sChessboardSide)
	{

	}

	//////////////////////////////////////////////////////////////////////////////////////////
	Position::Position(int8_t row, int8_t col) : m_row(row), m_col(col)
	{

	}

	//////////////////////////////////////////////////////////////////////////////////////////
	const Position& Position::operator=(const Position& other)
	{
		m_row = other.m_row;
		m_col = other.m_col;
		return *this;
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	bool Position::operator==(const Position& other) const
	{
		return m_row == other.m_row && m_col == other.m_col;
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	const Position& Position::operator+=(const Position& other)
	{
		m_row += other.m_row;
		m_col += other.m_col;
		return *this;
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	const Position& Position::operator*=(int8_t modifier)
	{
		m_row *= modifier;
		m_col *= modifier;
		return *this;
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	const Position Position::operator+(const Position& other)
	{
		return Position(m_row + other.m_row, m_col + other.m_col);
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	bool Position::IsValid() const
	{
		//~0x07 == 1111 1000
		//this is faster than traditional checks
		return (((m_row | m_col) & ~0x07) == 0);
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	std::int8_t Position::GetRow() const
	{
		return m_row;
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	std::int8_t Position::GetCol() const
	{
		return m_col;
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	std::int8_t Position::AsIndex() const
	{
		return m_row * sChessboardSide + m_col;
	}
}