#include "pch.h"
#include "GameState.h"

#include "Game/Actors/Chessboard.h"

namespace chessy
{
	//////////////////////////////////////////////////////////////////////////////////////////
	GameState::GameState()
	{
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	GameState::~GameState()
	{
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	void GameState::AddHit(const Position& position, const GameMove& hit)
	{
		auto& tileHits = m_chessboard[position.AsIndex()].hits;
		auto it = std::find(tileHits.begin(), tileHits.end(), hit);
		if (it == tileHits.end())
		{
			tileHits.push_back(hit);
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	void GameState::RemoveHit(const Position& position, const GameMove& hit)
	{
		std::erase(m_chessboard[position.AsIndex()].hits, hit);
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	const GameMoves& GameState::GetHits(const Position& position) const
	{
		return m_chessboard[position.AsIndex()].hits;
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	void GameState::AddMove(const Position& position, const GameMove& move)
	{
		m_chessboard[position.AsIndex()].moves.push_back(move);
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	void GameState::ClearMoves(const Position& position)
	{
		m_chessboard[position.AsIndex()].moves.clear();
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	const GameMoves& GameState::GetMoves(const Position& position) const
	{
		return m_chessboard[position.AsIndex()].moves;
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	std::optional<Position>& GameState::GetPromotionCache()
	{
		return m_promotionCache;
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	std::vector<GameMove>& GameState::GetCheckCache()
	{
		return m_checkCache;
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	std::optional<EnPassantCache>& GameState::GetEnPassantCache()
	{
		return m_enPassantCache;
	}
}